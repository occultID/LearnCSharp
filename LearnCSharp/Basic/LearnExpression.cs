/*【学习表达式】
 * 表达式的定义
	• 表达式是运算符和操作数构成的序列
		○ 这个序列的功能是：求值
			§ 值可能是：一个值、对象实例、方法、命名空间
	• C#语言对表达式的定义
		○ 算法逻辑的最基本（最小）单元，通过求值来表达一定的算法意图
		○ 因为运算符有优先级，所以表达式也有了优先级

 * 表达式分类
	• 对于直接求值的表达式可以分类为如下：
		○ 值
			§ 任何能得到值的运算，都是表达式
			§ 每个值都有关联的数据类型，该类型也是这个表达式的数据类型
		○ 变量
			§ 每个变量都有关联的类型，即变量的声明类型
		○ null文本
			§ 具有此分类的表达式可隐式转换为引用类型或可以为null的类型
		○ 匿名函数
			§ 具有此分类的表达式可隐式转换为兼容的委托类型或表达式目录树类型
		○ 属性访问
			§ 每个属性访问都有关联的类型，即属性的类型
			§ 属性访问可能具有关联的实例表达式
			§ 当调用实例属性访问的get\set访问器时，对关联实例表达式的求值结果将成为该属性的值
		○ 索引器访问
			§ 每个索引器访问都有关联的类型，即索引器的元素类型
			§ 索引器访问具有关联的实例表达式和关联的参数列表
				□ 如果调用索引器访问的get/set访问器
					® 则关联实例表达式的计算结果将成为该索引器的值
					® 参数列表的计算结果将成为调用的参数列表
		○ Nothing 
			§ 对返回值为void的方法的调用会发生这种情况
			§ 归类为Nothing的表达式仅在语句表达式的上下文中有效
	• 对于作为较大表达式的子表达式出现的表达式分类为如下
		○ 命名空间
			§ 具有此分类的表达式只能作为成员访问运算符的左侧出现
			§ 在任何其他上下文中，归类为命名空间的表达式会导致编译时错误
		○ 类型
			§ 具有此分类的表达式只能作为成员访问的左侧，或者作为as运算符、is运算符或typeof运算符的操作数
			§ 在其他任何上下文中，归类为类型的表达式会导致编译时错误
		○ 方法组
			§ 由成员查找产生的一组重载方法
				□ 成员查找是确定名称在类型上下文中的含义的过程
			§ 方法组可以具有关联的实例表达式和关联的类型参数列表
				□ 当调用实例方法时，对实例表达式的求值结果将成为该方法组所示的实例
			§ 方法组可以在调用表达式或委托创建表达式中使用，并且可以隐式转换为兼容的委托类型
			§ 在其他任何上下文中，归类为方法组的表达式会导致编译错误
		○ 事件访问
			§ 每个事件访问都有关联的类型，即事件的类型
			§ 事件访问可能具有关联的实例表达式
			§ 事件访问可能显示为+=和-=运算符的左操作数
			§ 在其他任何上下文中，归类为事件访问的表达式会导致编译时错误
		○ 抛出表达式
			§ 用于在一个表达式的多个上下文中抛出异常
			§ 可以通过隐式转换将抛出表达式转换为任何类型

 * 表达式的值
	• 求值注意优先级
	• 表达式的最终结果绝不会是命名空间、类型、方法组或事件访问
		○ 对于分类为命名空间、类型、方法或事件访问的表达式是仅在某些上下文中允许的中间构造
	• 通过执行get/set访问器的调用，始终可以将属性访问或索引访问表达式重新分类为值表达式
		○ 特定访问器由属性或索引器访问的上下文确定
			§ 如果属性或索引器访问是赋值的目标，则调用set访问器来为其分配新值，并将新值作为属性或索引器访问的值
			§ 属性或索引器访问的值是通过get访问器来获取的，如果不存在get访问器，则会发生编译时错误
	• 变量的值只是当前存储在变量标识的存储位置中的值
		○ 在获取变量的值之前，必须保证变量已被明确赋值

 * 静态和动态绑定
	• 绑定：根据构成表达式的类型或值(参数、操作数、接收方)，确定操作含义的过程通常称为“绑定”
		○ 静态绑定--符合以下条件的绑定
			§ 根据构成表达式的类型或值，表达式的操作含义在编译时已明确确定
			§ 如果表达式包含错误，编译器将检测并报告错误
		○ 动态绑定--符合以下条件的绑定
			§ 根据构成表达式的类型或值，表达式的操作含义在运行时才确定
			§ 表达式的类型是动态类型(dynamic)，所有的绑定都是基于运行时中对象的实际类型而非编译时指定的类型
			§ 采取动态绑定操作时，编译器不会执行任何检查
			§ 如果运行时绑定失败，则会在运行时抛出异常
	• C#中的以下操作服从绑定
		○ 成员访问
		○ 方法调用
		○ 委托调用
		○ 元素访问
		○ 对象创建
		○ 重载的一元运算符
		○ 重载的二元运算符
		○ 赋值运算符
		○ 隐式和显示转换
	• 绑定时间
		○ 静态绑定在编译时进行
		○ 动态绑定在运行时进行
 */
namespace LearnCSharp.Basic
{
    internal class LearnExpression
    {
		public static void StartLearnExpression() { }
    }
}
