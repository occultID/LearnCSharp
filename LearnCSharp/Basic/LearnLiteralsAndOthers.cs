/*【学习字面量、标点、空白和注释】 
 * 字面量：在语法上是指嵌入程序中的原始数据片段。
               比如一切在代码中用于赋值的数字、字符串等等
               直接使用字面量进行赋值或操作称为“硬编码”，除非必要，否则尽可能不要进行“硬编码”
               数值类字面量可以直接输入值，例如 5、6.2
               字符类字面量需要将值使用一对单引号包含，例如 'a'、'+'
               字符串类字面量需要将值使用一对双引号包含，例如 "你好啊！"、"Hello World!"

 * 标点：标点有助于划分程序结构，C#中常用的标点有“{}”、“;”、“:”、“.”等等
             “{}”：大括号用来包含和组合一系列语句称为语句块
             “;”：分号用于结束一条语句（但很多时候语句块后不需要使用分号，除非语句块是另一个语句的一部分）
             “:”：冒号用于在作为的标签的标识符后
             运算符：运算符是一系列预定义了有特殊意义的标点，运算符用于改变和结合表达式。后续会专门进行介绍运算符。

 * 空白：空白用于更好的组织和格式化代码结构，使代码结构清晰且极具可读性。
             除字符串内部的空白，其余空白会在编译时被编译器忽略。
   
 * 注释：程序员用注释来描述和解释自己写的代码
             C#有四种类型的注释方法：
                带分隔符的注释：形式为“/* 注释内容 * /”，可以跨越多行进行注释。
                单行注释：注释内容放在两个连续的正斜杠后面，形式为“// 注释内容”。
                XML带分隔符的注释：形式为“/** 注释内容 ** /”，可以跨越多行进行注释。
                XML单行注释：形式为“/// 注释内容”
             XML注释会被编译器注意到其存在，且编译器可将其存储到一个单独的文件中。
             编译器会忽视注释的存在，不会将其编译到代码中。
             注意：不要写“一言难尽”“讳莫如深”的代码，尽量不要使用注释，最好的注释就是清晰易懂的代码
*/
namespace LearnCSharp.Basic
{
    internal class LearnLiteralsAndOthers
    {
        /*【10301：字面量、标点、空白和注释】
         * 这是带分隔符的多行注释
         */
        /// <summary>
        /// 这是一个xml注释，通常用于注释整个方法的作用。
        /// </summary>
        public static void StartLearnLiteralsAndOthers()
        {
            Console.WriteLine("------示例：字面量、标点、空白和注释------\n");
            //下列语句都使用标点“;”结束语句
            //下列语句都是用标点“=”进行赋值操作
            int number = 5;             //5：是一个数值字面量
            char @char = 'a';               //'a'：是一个字符字面量
            string words = "你好啊！";  //“你好啊！”：是一个字符窜字面量

            //空白用于格式化代码
            //.和()都是运算符
            Console.WriteLine($"\n输出存储于局部变量的字面量：\n--number：{number}\n--char：{@char}\n--words：{words}\n");
        }
    }
}
